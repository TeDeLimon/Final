{"version":3,"sources":["app.js"],"names":["paso","enlaceUsado","cita","idUsuario","idMesa","comensales","fecha","hora","comentarios","API","document","querySelector","addEventListener","guardarCita","value","usuario","getElementById","async","consultarAPI","url","resultado","fetch","servicios","json","mostrarServicios","error","console","log","buscarPorHoraFechaComensal","fechaInput","botonesHora","querySelectorAll","botonesComensal","comensalSeleccionado","forEach","botonComensal","e","classList","remove","add","target","innerText","boton","horaSeleccionada","nuevoServicio","datos","FormData","append","respuesta","method","body","mesas","firstChild","removeChild","servicio","id","capacidad","estado","capacidadMesa","createElement","textContent","mesaDiv","dataset","idServicio","parseInt","appendChild","onclick","seleccionarServicio","divMesa","contains","vacio","key","Object","entries","datosCita","htmlEntities","Swal","fire","position","icon","title","showConfirmButton","timer","then","window","location","replace","str","String"],"mappings":"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","file":"app.js","sourcesContent":["let paso = 1;\r\nlet enlaceUsado = false;\r\nconst cita = {\r\n    idUsuario: '', //id del usuario que hace la reserva\r\n    idMesa: '1', //número de la mesa\r\n    comensales: '1', //cantidad de comensales\r\n    fecha: '', //fecha de la reserva\r\n    hora: '',\r\n    comentarios: 'Sin comentarios'\r\n};\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    usuario();\r\n    comentarios();\r\n    API();\r\n    buscarPorHoraFechaComensal()\r\n});\r\nfunction API() {\r\n    const sendAPI = document.querySelector('#sendAPI');\r\n    sendAPI.addEventListener('click', guardarCita);\r\n}\r\nfunction comentarios() {\r\n    const comentarios = document.querySelector('#comentarios');\r\n    comentarios.addEventListener('input', function () {\r\n        cita.comentarios = comentarios.value;\r\n    });\r\n}\r\nfunction usuario() {\r\n    const usuario = document.getElementById('id');\r\n    cita.idUsuario = usuario.value;\r\n}\r\nasync function consultarAPI() { //Dado que no sabemos el tiempo que demora la consulta debemos usar una función asíncrona\r\n    try {\r\n        const url = 'http://localhost:300/api/mesas';\r\n        const resultado = await fetch(url); //Esperamos el resultado\r\n        const servicios = await resultado.json();\r\n        await mostrarServicios(servicios);\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\nfunction buscarPorHoraFechaComensal() {\r\n    const fechaInput = document.querySelector('#fecha');\r\n    const botonesHora = document.querySelectorAll('.hora');\r\n    const botonesComensal = document.querySelectorAll('.comensal');\r\n    comensalSeleccionado = cita.comensales;\r\n    botonesComensal.forEach( botonComensal => {\r\n        botonComensal.addEventListener('click', function (e) {\r\n            const botonComensalAnterior = document.querySelector('.seleccionadoComensal');\r\n            botonComensalAnterior.classList.remove('seleccionadoComensal')\r\n            botonComensal.classList.add('seleccionadoComensal');\r\n            comensalSeleccionado = e.target.innerText;\r\n            cita.comensales = comensalSeleccionado;\r\n        })\r\n    });\r\n    botonesHora.forEach( (boton) =>  {\r\n        boton.addEventListener('click', function (e) {\r\n            botonesHora.forEach( (boton) => {\r\n                boton.classList.remove('seleccionadoFecha');\r\n            });\r\n            boton.classList.add('seleccionadoFecha');\r\n            horaSeleccionada = e.target.innerText;\r\n            if(fechaInput.value != '') {\r\n                cita.fecha = '';\r\n                cita.hora = '';\r\n                cita.idMesa = '';\r\n                nuevoServicio(fechaInput.value, horaSeleccionada);\r\n            }\r\n        });\r\n    });     \r\n}\r\nasync function nuevoServicio(fecha, hora) {\r\n    cita.fecha = fecha;\r\n    cita.hora = hora;\r\n    const datos = new FormData();\r\n    datos.append('fecha',fecha);\r\n    datos.append('hora',hora);\r\n    // console.log([...datos]);\r\n    //Petición hacia la API\r\n    try {\r\n        const url = 'http://localhost:300/api/mesas';\r\n\r\n        const respuesta = await fetch(url, { \r\n            method: 'POST',\r\n            body: datos\r\n        }); //Hacemos el fetch hacia la url y debemos añadir el metodo POST como atributos\r\n        const servicios = await respuesta.json();\r\n        const mesas = document.querySelector('#mesas');\r\n        while(mesas.firstChild) {\r\n            mesas.removeChild(mesas.firstChild);\r\n        }\r\n        await mostrarServicios(servicios);\r\n        \r\n    } catch (error) {\r\n        console.log('desde error');\r\n    }  \r\n}\r\nasync function mostrarServicios(servicios) {\r\n    servicios.mesas.forEach(servicio => {\r\n        const{ id, capacidad, estado} = servicio;\r\n\r\n        const capacidadMesa = document.createElement('P');\r\n        capacidadMesa.classList.add('capacidad-mesas');\r\n        capacidadMesa.textContent = capacidad;  \r\n\r\n        const mesaDiv = document.createElement('DIV');\r\n        mesaDiv.classList.add('mesa');\r\n        mesaDiv.dataset.idServicio = id;\r\n\r\n        if(estado == 'reservada')    {\r\n            mesaDiv.classList.add('reservada');\r\n        } else {\r\n            if(capacidad > (parseInt(comensalSeleccionado) + 2)  || capacidad < comensalSeleccionado) {\r\n                mesaDiv.classList.add('reservada');\r\n            }\r\n        }\r\n        // if(comensalSeleccionado > capacidad && comensalSeleccionado % 2 != 0 || capacidad != comensalSeleccionado + 1) mesaDiv.classList.add('reservada');\r\n\r\n        mesaDiv.appendChild(capacidadMesa);\r\n        document.querySelector('#mesas').appendChild(mesaDiv);\r\n\r\n        mesaDiv.onclick = function() { //Hacemos uso de un callback que es una respuesta a un evento\r\n            seleccionarServicio(servicio);\r\n        };\r\n    });\r\n}\r\nfunction seleccionarServicio(servicio) {\r\n    const { id } = servicio;\r\n    const { estado } = servicio;\r\n    \r\n    const divMesa = document.querySelector(`[data-id-servicio=\"${id}\"]`);\r\n    if(estado == 'disponible' && !divMesa.classList.contains('seleccionadoMesa') && cita.idMesa == '') {\r\n        divMesa.classList.add('seleccionadoMesa');\r\n        cita.idMesa = id;\r\n    } else if (estado == 'disponible' && cita.idMesa != ''){\r\n        const seleccionada = document.querySelector('.seleccionadoMesa'); \r\n        seleccionada.classList.remove('seleccionadoMesa');\r\n        divMesa.classList.add('seleccionadoMesa');\r\n        cita.idMesa = id;\r\n    }\r\n    console.log(cita);\r\n}\r\nasync function guardarCita() {\r\n    let vacio = false; //Recorremos el objeto para comprobar sí alguna propiedad está vacía\r\n    for(const [key, value] of Object.entries(cita)) {\r\n        if(value == '') vacio = true;\r\n    }\r\n    if(vacio == false && enlaceUsado == false) {\r\n        const datosCita = new FormData();\r\n        datosCita.append('clientes_id',cita.idUsuario);\r\n        datosCita.append('mesas_id',cita.idMesa);\r\n        datosCita.append('comensales',cita.comensales);\r\n        datosCita.append('fecha',cita.fecha);\r\n        datosCita.append('hora',cita.hora);\r\n        datosCita.append('comentarios',htmlEntities(cita.comentarios));\r\n        enlaceUsado = true;\r\n        try {\r\n            const url = 'http://localhost:300/api/guardar';\r\n    \r\n            const respuesta = await fetch(url, { \r\n                method: 'POST',\r\n                body: datosCita\r\n            }); //Hacemos el fetch hacia la url y debemos añadir el metodo POST como atributos\r\n            const status = await respuesta.json();\r\n            if(status.resultado) {\r\n                 Swal.fire({\r\n                 position: 'center',\r\n                 icon: 'success',\r\n                 title: 'Reserva confirmada',\r\n                 showConfirmButton: false,\r\n                 timer: 2500\r\n                 }).then( () => {\r\n                    window.location.replace(\"http://localhost:300/bookings\");\r\n                 });\r\n             }\r\n        } catch (error) {\r\n            console.log('desde error');\r\n        }\r\n    } else {\r\n        Swal.fire('Por favor revisa que todos los campos estén completados o enlace ya usado');\r\n    } \r\n}\r\n\r\nfunction htmlEntities(str) {\r\n    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\r\n}\r\n/*\r\nif(respuesta) {\r\n            Swal.fire({\r\n                position: 'center',\r\n                icon: 'success',\r\n                title: 'Se ha creado la resrerva',\r\n                showConfirmButton: false,\r\n                timer: 2500\r\n            }).then( (respuesta) => {\r\n                window.location.reload();\r\n            });\r\n        }\r\n\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'Hubo un error al hacer la reserva'\r\n        });\r\n\r\n*/"]}